name: Maven Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version'
        required: true
      developmentVersion:
        description: 'Next development version (with -SNAPSHOT suffix)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Update to release version
        run: mvn --settings .mvn/settings.xml versions:set -DnewVersion=${{ github.event.inputs.releaseVersion }}

      - name: Build and deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD}}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MAVEN_GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: mvn --settings .mvn/settings.xml clean deploy -P release -DskipTests

      - name: Create Git tag
        run: |
          git add pom.xml
          git commit -m "Release version ${{ github.event.inputs.releaseVersion }}"
          git tag -a v${{ github.event.inputs.releaseVersion }} -m "Release version ${{ github.event.inputs.releaseVersion }}"

      - name: Update to next development version
        run: mvn --settings .mvn/settings.xml versions:set -DnewVersion=${{ github.event.inputs.developmentVersion }}

      - name: Commit next development version
        run: |
          git add pom.xml
          git commit -m "Prepare for next development iteration ${{ github.event.inputs.developmentVersion }}"

      - name: Push release version to main and tags
        run: |
          # Push the release version commit and tag to main
          git push origin main
          git push origin v${{ github.event.inputs.releaseVersion }}

      - name: Push development version to develop branch
        run: |
          # Save the development version commit hash and content
          DEV_COMMIT=$(git rev-parse HEAD)
          git show $DEV_COMMIT:pom.xml > /tmp/dev-pom.xml

          # Check if develop branch exists, create it if it doesn't
          if ! git ls-remote --heads origin develop | grep develop; then
            # Create develop branch from the current state (after committing development version)
            git checkout -b develop
          else
            # If develop branch exists, fetch it and checkout
            git fetch origin develop
            git checkout develop

            # Apply the development version changes
            cp /tmp/dev-pom.xml pom.xml
            git add pom.xml
            git commit -m "Prepare for next development iteration ${{ github.event.inputs.developmentVersion }}"
          fi

          # Push the development version to develop branch
          git push origin develop

          # Return to main branch for the rest of the workflow
          git checkout main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.releaseVersion }}
          name: Release ${{ github.event.inputs.releaseVersion }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
